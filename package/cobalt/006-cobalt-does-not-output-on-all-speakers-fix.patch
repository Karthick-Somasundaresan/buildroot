diff --git a/src/third_party/starboard/wpe/shared/audio_sink/audio_sink_get_max_channels_5_1.cc b/src/third_party/starboard/wpe/shared/audio_sink/audio_sink_get_max_channels_5_1.cc
new file mode 100644
index 000000000..979f62f81
--- /dev/null
+++ b/src/third_party/starboard/wpe/shared/audio_sink/audio_sink_get_max_channels_5_1.cc
@@ -0,0 +1,19 @@
+// Copyright 2017 The Cobalt Authors. All Rights Reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include "starboard/audio_sink.h"
+
+int SbAudioSinkGetMaxChannels() {
+  return 6;
+}
diff --git a/src/third_party/starboard/wpe/shared/media/gst_media_utils.cc b/src/third_party/starboard/wpe/shared/media/gst_media_utils.cc
index 990c829e4..91311a6cf 100644
--- a/src/third_party/starboard/wpe/shared/media/gst_media_utils.cc
+++ b/src/third_party/starboard/wpe/shared/media/gst_media_utils.cc
@@ -6,6 +6,8 @@
 
 #include "base/logging.h"
 #include "third_party/starboard/wpe/shared/media/gst_media_utils.h"
+#include <sstream>
+#include <iomanip>
 
 namespace third_party {
 namespace starboard {
@@ -109,6 +111,41 @@ bool GstRegistryHasElementForCodec(C codec) {
   return false;
 }
 
+template <typename T>
+inline T SwapByteOrder(const T& val) {
+  int totalBytes = sizeof(val);
+  T swapped = static_cast<T>(0);
+  for (int i = 0; i < totalBytes; ++i) {
+    swapped |= (val >> (8 * (totalBytes - i - 1)) & 0xFF) << (8 * i);
+  }
+  return swapped;
+}
+
+template <typename T>
+inline std::string IntToHex(T val) {
+  std::ostringstream result;
+  size_t width = sizeof(T) * 2;
+
+  result << std::setfill('0') << std::setw(width) << std::hex;
+  if (width > 2) {
+    result << SwapByteOrder<T>(val | 0);
+  } else {
+    result << (val | 0);
+  }
+
+  return result.str();
+}
+
+inline std::string StringToHex(const std::string& string)
+{
+    std::ostringstream result;
+
+    for (std::string::size_type i = 0; i < string.length(); ++i)
+        result << std::hex << std::setfill('0') << static_cast<int>(string[i]);
+
+    return result.str();
+}
+
 }  // namespace
 
 bool GstRegistryHasElementForMediaType(SbMediaVideoCodec codec) {
@@ -181,11 +218,38 @@ std::vector<std::string> CodecToGstCaps(SbMediaAudioCodec codec,
     case kSbMediaAudioCodecEac3:
       return {{"audio/x-eac3"}};
 #endif  // SB_HAS(AC3_AUDIO)
-    case kSbMediaAudioCodecOpus:
-      return {{"audio/x-opus, channel-mapping-family=0"}};
+    case kSbMediaAudioCodecOpus:{ 
+      std::string caps = "audio/x-opus, streamheader=(buffer)<";
+      
+      caps += StringToHex("OpusHead");                                                   // OpusHeader
+      caps += IntToHex(static_cast<uint8_t>(1));                                         // version, always 1
+      caps += IntToHex(static_cast<uint8_t>(info ? info->number_of_channels : 1));       // channel count
+      caps += IntToHex(static_cast<uint16_t>(0));                                        // preskip
+      caps += IntToHex(static_cast<uint32_t>(info ? info->samples_per_second : 48000));  // inputSampleRate
+      caps += IntToHex(static_cast<uint16_t>(0));                                        // outputgain
+      caps += IntToHex(static_cast<uint8_t>(0));                                         // mappingFamily
+      caps += IntToHex(static_cast<uint8_t>(0));                                         // padding
+      caps += ",";
+      caps += StringToHex("OpusTags");                                                   // Additional OpusTags, unused parameter
+      caps += ">;";
+      
+      return {caps};
+      
+    }
 
-    case kSbMediaAudioCodecVorbis:
-      return {{"audio/x-vorbis"}};
+    case kSbMediaAudioCodecVorbis:{
+      std::string caps = "audio/x-vorbis"; 
+      if (info) {
+        caps += ", channels=" + std::to_string(info->number_of_channels);
+        caps += ", rate=" + std::to_string(info->samples_per_second);
+        LOG(INFO) << "Adding audio caps data from sample info.";
+      }
+      else{
+        caps += ", channels=1";
+        caps += ", rate=48000";
+      }
+      return {caps};
+    }
   }
 }
 
diff --git a/src/third_party/starboard/wpe/shared/sources.gypi b/src/third_party/starboard/wpe/shared/sources.gypi
index b58ed3686..659db400c 100644
--- a/src/third_party/starboard/wpe/shared/sources.gypi
+++ b/src/third_party/starboard/wpe/shared/sources.gypi
@@ -24,11 +24,11 @@
         '<(DEPTH)/starboard/shared/starboard/audio_sink/audio_sink_is_valid.cc',
         '<(DEPTH)/starboard/shared/starboard/audio_sink/stub_audio_sink_type.cc',
         '<(DEPTH)/starboard/shared/starboard/audio_sink/audio_sink_is_audio_frame_storage_type_supported_interleaved_only.cc',
-        '<(DEPTH)/starboard/shared/starboard/audio_sink/audio_sink_get_max_channels_5_1.cc',
         '<(DEPTH)/starboard/shared/starboard/audio_sink/audio_sink_get_min_buffer_size_in_frames.cc',
         '<(DEPTH)/starboard/shared/starboard/audio_sink/audio_sink_get_nearest_supported_sample_frequency.cc',
 
         '<(DEPTH)/third_party/starboard/wpe/shared/audio_sink/gstreamer_audio_sink_type.cc',
+        '<(DEPTH)/third_party/starboard/wpe/shared/audio_sink/audio_sink_get_max_channels_5_1.cc',
         '<(DEPTH)/third_party/starboard/wpe/shared/audio_sink/audio_sink_is_audio_sample_type_supported.cc',
     ],
 
