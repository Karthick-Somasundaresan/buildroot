diff --git a/DIALServer/DIALServer.cpp b/DIALServer/DIALServer.cpp
index c3de995..139b361 100644
--- a/DIALServer/DIALServer.cpp
+++ b/DIALServer/DIALServer.cpp
@@ -396,11 +396,11 @@ namespace Plugin {
             response->Message = _T("Payload too long");
         } else {
             const string additionalDataUrl = (_T("http://localhost/") + app.Name() + _T("/") + _DefaultDataExtension);
-            TCHAR encodedDataUrl[additionalDataUrl.length() * 3 * sizeof(TCHAR)];
+            TCHAR* encodedDataUrl = reinterpret_cast<TCHAR*>(ALLOCA(additionalDataUrl.length() * 3 * sizeof(TCHAR)));
             Core::URL::Encode(additionalDataUrl.c_str(), static_cast<uint16_t>(additionalDataUrl.length()), encodedDataUrl, static_cast<uint16_t>(sizeof(encodedDataUrl)));
             string parameters = (app.AppURL() + (app.HasQueryParameter()? _T("&") : _T("?")) + _T("additionalDataUrl=") + encodedDataUrl);
 
-            TRACE(Trace::Information, (_T("Launch Application [%s] with params: %s"), app.Name().c_str(), parameters.c_str()));
+            TRACE(Trace::Information, (_T("Launch Application [%s] with params: %s, payload: %s"), app.Name().c_str(), parameters.c_str(), payload.c_str()));
 
             // See if we can find the plugin..
             ASSERT(_service != NULL);
diff --git a/DIALServer/DIALServer.h b/DIALServer/DIALServer.h
index be47a92..e81640b 100644
--- a/DIALServer/DIALServer.h
+++ b/DIALServer/DIALServer.h
@@ -527,12 +527,14 @@ namespace Plugin {
             {
                 IApplication* application = nullptr;
                 if (config.Callsign.IsSet() == true) {
-                    return (new HANDLER(shell, config, parent));
+                    return (new typename HANDLER::Active(shell, config, parent));
+                } else {
+                    return (new typename HANDLER::Passive(shell, config, parent));
                 }
                 return application;
             }
         };
-        class EXTERNAL Protocol {
+        class Protocol {
         private:
             // -------------------------------------------------------------------
             // This object should not be copied or assigned. Prevent the copy
diff --git a/DIALServer/Netflix.cpp b/DIALServer/Netflix.cpp
index a541dd3..f720ef7 100644
--- a/DIALServer/Netflix.cpp
+++ b/DIALServer/Netflix.cpp
@@ -25,38 +25,9 @@
 namespace WPEFramework {
 namespace DIALHandlers {
 
-    class Netflix : public Plugin::DIALServer::Default {
-    public:
-        Netflix() = delete;
-        Netflix(const Netflix&) = delete;
-        Netflix& operator=(const Netflix&) = delete;
-
-    public:
-        Netflix(PluginHost::IShell* service, const Plugin::DIALServer::Config::App& config, Plugin::DIALServer *parent)
-            : Default(service, config, parent)
-            , _netflix(nullptr)
-            , _service(nullptr)
-            , _notification(*this)
-            , _hidden(false)
-            , _lock()
-            , _callsign(config.Callsign.Value())
-        {
-            ASSERT(service != nullptr);
-            ASSERT(parent != nullptr);
-            if (_callsign.empty() == false) {
-                service->Register(&_notification);
-            }
-        }
-        ~Netflix() override
-        {
-            Detach();
-            if (_callsign.empty() == false) {
-                _service->Unregister(&_notification);
-            }
-        }
-
-    public:
-        uint32_t Start(const string& params, const string& payload) override
+    struct Netflix {
+    private:
+        static string Query(const string& params, const string& payload)
         {
             string query = params;
 
@@ -65,134 +36,191 @@ namespace DIALHandlers {
 
             if (payload.empty() == false) {
                 // Netflix expects the payload as urlencoded option "dial"
-                TCHAR encodedPayload[payload.length() * 3 * sizeof(TCHAR)];
+                TCHAR* encodedPayload = reinterpret_cast<TCHAR*>(ALLOCA(payload.length() * 3 * sizeof(TCHAR)));
                 Core::URL::Encode(payload.c_str(), static_cast<uint16_t>(payload.length()), encodedPayload, static_cast<uint16_t>(sizeof(encodedPayload)));
                 query = query + _T("&dial=") + encodedPayload;
             }
 
-            if (_callsign.empty() == false) {
-                // Set custom query paramters
-                Core::SystemInfo::SetEnvironment(_T("ONE_TIME_QUERY_STRING_OVERRIDE"), query.c_str());
-            }
-
-            return (Default::Start(query, {}));
-        }
-        void Stop(const string& params, const string& payload) override
-        {
-            Detach();
-            Default::Stop(params, payload);
-        }
-        bool Connect() override
-        {
-            Attach();
-            return (_netflix != nullptr);
-        }
-        bool IsConnected() override
-        {
-            return (_netflix != nullptr);
-        }
-        bool HasHideAndShow() const override
-        {
-            return (_netflix != nullptr);
-        }
-        uint32_t Show() override
-        {
-            _lock.Lock();
-            uint32_t result = Core::ERROR_NONE;
-            _hidden = false;
-            if (_netflix != nullptr) {
-                _netflix->SetVisible(true);
-            } else {
-                result = Core::ERROR_GENERAL;
-            }
-            _lock.Unlock();
-            return (result);
-        }
-        void Hide() override
-        {
-            _lock.Lock();
-            if (_netflix != nullptr) {
-                _netflix->SetVisible(false);
-                // TODO: Poor man's state tracking; would be optimal to fetch the state from Netflix itself.
-                _hidden = true;
-            }
-            _lock.Unlock();
-        }
-        bool IsHidden() const override
-        {
-            return (_hidden);
-        }
-        bool URL(const string& /* url */, const string& /* payload */) override
-        {
-            return (false);
+            return (query);
         }
 
-    private:
-        const string& Callsign() const
-        {
-            return (_callsign);
-        }
-        void Attach()
-        {
-            _lock.Lock();
-            if (_netflix == nullptr) {
-                _netflix = Plugin::DIALServer::Default::QueryInterface<Exchange::INetflix>();
+    public:
+        class Passive : public Plugin::DIALServer::Default {
+        public:
+            Passive() = delete;
+            Passive(const Passive&) = delete;
+            Passive& operator=(const Passive&) = delete;
+
+        public:
+            Passive(PluginHost::IShell* service, const Plugin::DIALServer::Config::App& config, Plugin::DIALServer *parent)
+                : Default(service, config, parent)
+            {
             }
-            _lock.Unlock();
-        }
-        void Detach()
-        {
-            _lock.Lock();
-            _hidden = false;
-            if (_netflix != nullptr) {
-                _netflix->Release();
-                _netflix = nullptr;
+            ~Passive() = default;
+
+        public:
+            uint32_t Start(const string& params, const string& payload) override
+            {
+                return (Default::Start(Query(params, payload), {}));
             }
-            _lock.Unlock();
-        }
+        }; // class Passive
+
+        class Active : public Plugin::DIALServer::Default {
+        public:
+            Active() = delete;
+            Active(const Active&) = delete;
+            Active& operator=(const Active&) = delete;
 
-    private:
-        class Notification : public PluginHost::IPlugin::INotification {
         public:
-            Notification() = delete;
-            Notification(const Notification&) = delete;
-            Notification& operator=(const Notification&) = delete;
-            Notification(Netflix& parent)
-                : _parent(parent)
+            Active(PluginHost::IShell* service, const Plugin::DIALServer::Config::App& config, Plugin::DIALServer *parent)
+                : Default(service, config, parent)
+                , _netflix(nullptr)
+                , _service(nullptr)
+                , _notification(*this)
+                , _hidden(false)
+                , _lock()
+                , _callsign(config.Callsign.Value())
+            {
+                ASSERT(service != nullptr);
+                ASSERT(parent != nullptr);
+                service->Register(&_notification);
+            }
+            ~Active() override
             {
+                Detach();
+                _service->Unregister(&_notification);
             }
-            ~Notification() = default;
 
         public:
-            void StateChange(PluginHost::IShell* shell) override
-            {
-                ASSERT(shell != nullptr);
-                if (shell->Callsign() == _parent.Callsign()) {
-                    if (shell->State() == PluginHost::IShell::ACTIVATED) {
-                        _parent.Attach();
-                    } else if (shell->State() == PluginHost::IShell::DEACTIVATED) {
-                        _parent.Detach();
-                    }
+            uint32_t Start(const string& params, const string& payload) override
+            {
+                const string query = Query(params, payload);
+
+                // Set custom query paramters
+                Core::SystemInfo::SetEnvironment(_T("ONE_TIME_QUERY_STRING_OVERRIDE"), query.c_str());
+
+                return (Default::Start(query, {}));
+            }
+            void Stop(const string& params, const string& payload) override
+            {
+                Detach();
+                Default::Stop(params, payload);
+            }
+            bool Connect() override
+            {
+                Attach();
+                return (_netflix != nullptr);
+            }
+            bool IsConnected() override
+            {
+                return (_netflix != nullptr);
+            }
+            bool HasHideAndShow() const override
+            {
+                return (_netflix != nullptr);
+            }
+            uint32_t Show() override
+            {
+                _lock.Lock();
+                uint32_t result = Core::ERROR_NONE;
+                _hidden = false;
+                if (_netflix != nullptr) {
+                    _netflix->SetVisible(true);
+                } else {
+                    result = Core::ERROR_GENERAL;
                 }
+                _lock.Unlock();
+                return (result);
+            }
+            void Hide() override
+            {
+                _lock.Lock();
+                if (_netflix != nullptr) {
+                    _netflix->SetVisible(false);
+                    // TODO: Poor man's state tracking; would be optimal to fetch the state from Netflix itself.
+                    _hidden = true;
+                }
+                _lock.Unlock();
+            }
+            bool IsHidden() const override
+            {
+                return (_hidden);
+            }
+            bool URL(const string& /* url */, const string& /* payload */) override
+            {
+                return (false);
             }
 
-        public:
-            BEGIN_INTERFACE_MAP(Notification)
-                INTERFACE_ENTRY(PluginHost::IPlugin::INotification)
-            END_INTERFACE_MAP
+        private:
+            const string& Callsign() const
+            {
+                return (_callsign);
+            }
+            void Attach()
+            {
+                _lock.Lock();
+                if (_netflix == nullptr) {
+                    _netflix = Plugin::DIALServer::Default::QueryInterface<Exchange::INetflix>();
+                }
+                _lock.Unlock();
+            }
+            void Detach()
+            {
+                _lock.Lock();
+                _hidden = false;
+                if (_netflix != nullptr) {
+                    _netflix->Release();
+                    _netflix = nullptr;
+                }
+                _lock.Unlock();
+            }
 
         private:
-            Netflix& _parent;
-        }; // class Notification
+            class Notification : public PluginHost::IPlugin::INotification {
+            public:
+                Notification() = delete;
+                Notification(const Notification&) = delete;
+                Notification& operator=(const Notification&) = delete;
+
+            public:
+                explicit Notification(Active& parent)
+                    : _parent(parent)
+                {
+                }
+                ~Notification() = default;
+
+            public:
+                void StateChange(PluginHost::IShell* shell) override
+                {
+                    ASSERT(shell != nullptr);
+                    if (shell->Callsign() == _parent.Callsign()) {
+                        if (shell->State() == PluginHost::IShell::ACTIVATED) {
+                            _parent.Attach();
+                        } else if (shell->State() == PluginHost::IShell::DEACTIVATED) {
+                            _parent.Detach();
+                        }
+                    }
+                }
 
-    private:
-        Exchange::INetflix* _netflix;
-        PluginHost::IShell* _service;
-        Core::Sink<Notification> _notification;
-        bool _hidden;
-        mutable Core::CriticalSection _lock;
-        string _callsign;
-    };
+            public:
+                BEGIN_INTERFACE_MAP(Notification)
+                    INTERFACE_ENTRY(PluginHost::IPlugin::INotification)
+                END_INTERFACE_MAP
+
+            private:
+                Active& _parent;
+            }; // class Notification
+
+        private:
+            Exchange::INetflix* _netflix;
+            PluginHost::IShell* _service;
+            Core::Sink<Notification> _notification;
+            bool _hidden;
+            mutable Core::CriticalSection _lock;
+            string _callsign;
+        }; // class Active
+
+    }; // class Netflix
 
     static Plugin::DIALServer::ApplicationRegistrationType<Netflix> _netflixHandler;
 }
diff --git a/DIALServer/YouTube.cpp b/DIALServer/YouTube.cpp
index 5acb880..2063812 100644
--- a/DIALServer/YouTube.cpp
+++ b/DIALServer/YouTube.cpp
@@ -25,99 +25,154 @@
 namespace WPEFramework {
 namespace DIALHandlers {
 
-    class YouTube : public Plugin::DIALServer::Default {
+    struct YouTube {
     private:
-        YouTube() = delete;
-        YouTube(const YouTube&) = delete;
-        YouTube& operator=(const YouTube&) = delete;
+        static string Query(const string& params, const string& payload)
+        {
+            return (params + _T("&") + payload);
+        }
 
     public:
+        class Passive : public Plugin::DIALServer::Default {
+        private:
+            Passive() = delete;
+            Passive(const Passive&) = delete;
+            Passive& operator=(const Passive&) = delete;
+
+        public:
 #ifdef __WINDOWS__
 #pragma warning(disable : 4355)
 #endif
-        YouTube(PluginHost::IShell* service, const Plugin::DIALServer::Config::App& config, Plugin::DIALServer* parent)
-            : Default(service, config, parent)
-            , _browser(nullptr)
-            , _hidden(false)
-            , _notification(this)
-        {
-        }
+            Passive(PluginHost::IShell* service, const Plugin::DIALServer::Config::App& config, Plugin::DIALServer* parent)
+                : Default(service, config, parent)
+            {
+            }
 #ifdef __WINDOWS__
 #pragma warning(default : 4355)
 #endif
-        virtual ~YouTube()
-        {
-            Stopped({}, {});
-        }
+            ~Passive() = default;
 
-    public:
-        uint32_t Start(const string& params, const string& payload) override
-        {
-            return Default::Start(params + _T("&") + payload, {});
-        }
-
-        bool Connect() override
-        {
-            _browser = Plugin::DIALServer::Default::QueryInterface<Exchange::IBrowser>();
-            if (_browser != nullptr) {
-                _browser->Register(&_notification);
+        public:
+            uint32_t Start(const string& params, const string& payload) override
+            {
+                return Default::Start(Query(params, payload), {});
             }
-
-            return _browser != nullptr;
-        }
-        bool IsConnected() override
-        {
-            return _browser != nullptr;
-        }
-        virtual void Stopped(const string& data, const string& payload)
-        {
-            if (_browser != nullptr) {
-                _browser->Unregister(&_notification);
-                _browser->Release();
-                _browser = nullptr;
+            bool URL(const string& url, const string& payload) override
+            {
+                Default::URL(Query(url, payload), {});
+                return (true);
             }
-        }
-
-        bool HasHideAndShow() const override {
-            return _browser != nullptr;
-        }
+        }; // class Passive
 
-        uint32_t Show() override {
-            _browser->Hide(false);
-            return Core::ERROR_NONE;
-        }
+    public:
+        class Active : public Passive {
+        private:
+            Active() = delete;
+            Active(const Active&) = delete;
+            Active& operator=(const Active&) = delete;
 
-        void Hide() override {
-            _browser->Hide(true);
-        }
+        public:
+#ifdef __WINDOWS__
+#pragma warning(disable : 4355)
+#endif
+            Active(PluginHost::IShell* service, const Plugin::DIALServer::Config::App& config, Plugin::DIALServer* parent)
+                : Passive(service, config, parent)
+                , _browser(nullptr)
+                , _hidden(false)
+                , _notification(this)
+            {
+            }
+#ifdef __WINDOWS__
+#pragma warning(default : 4355)
+#endif
+            ~Active() override
+            {
+                Stopped({}, {});
+            }
 
-        bool IsHidden() const override {
-            return _hidden;
-        }
+        public:
+            bool Connect() override
+            {
+                _browser = Plugin::DIALServer::Default::QueryInterface<Exchange::IBrowser>();
+                if (_browser != nullptr) {
+                    _browser->Register(&_notification);
+                }
 
-        bool URL(const string& url, const string& payload) override {
-            _browser->SetURL(url + _T("&") + payload);
-            return (true);
-        }
+                return _browser != nullptr;
+            }
+            bool IsConnected() override
+            {
+                return _browser != nullptr;
+            }
+            virtual void Stopped(const string& data, const string& payload)
+            {
+                if (_browser != nullptr) {
+                    _browser->Unregister(&_notification);
+                    _browser->Release();
+                    _browser = nullptr;
+                }
+            }
+            bool HasHideAndShow() const override
+            {
+                return _browser != nullptr;
+            }
+            uint32_t Show() override
+            {
+                _browser->Hide(false);
+                return Core::ERROR_NONE;
+            }
+            void Hide() override
+            {
+                _browser->Hide(true);
+            }
+            bool IsHidden() const override
+            {
+                return _hidden;
+            }
 
-    private:
-        struct Notification : public Exchange::IBrowser::INotification {
-            explicit Notification(YouTube* parent) : _parent(parent) {}
-            void LoadFinished(const string& URL) override {}
-            void URLChanged(const string& URL) override {}
-            void Hidden(const bool hidden) override { _parent->_hidden = hidden; }
-            void Closure() override {}
-
-            BEGIN_INTERFACE_MAP(YouTube)
-                INTERFACE_ENTRY(Exchange::IBrowser::INotification)
-            END_INTERFACE_MAP
-
-            YouTube* _parent;
-        };
-        Exchange::IBrowser* _browser;
-        bool _hidden;
-        Core::Sink<Notification> _notification;
-    };
+        private:
+            struct Notification : public Exchange::IBrowser::INotification {
+            public:
+                Notification() = delete;
+                Notification(const Notification&) = delete;
+                Notification& operator=(const Notification&) = delete;
+
+            public:
+                explicit Notification(Active* parent)
+                    : _parent(parent)
+                {
+                }
+                ~Notification() = default;
+
+            public:
+                void Hidden(const bool hidden) override
+                {
+                    _parent->_hidden = hidden;
+                }
+                void LoadFinished(const string& URL) override
+                {
+                }
+                void URLChanged(const string& URL) override
+                {
+                }
+                void Closure() override
+                {
+                }
+
+                BEGIN_INTERFACE_MAP(Notification)
+                    INTERFACE_ENTRY(Exchange::IBrowser::INotification)
+                END_INTERFACE_MAP
+
+            private:
+                Active* _parent;
+            };
+
+            Exchange::IBrowser* _browser;
+            bool _hidden;
+            Core::Sink<Notification> _notification;
+        }; // class Active
+
+    }; // class YouTube
 
     static Plugin::DIALServer::ApplicationRegistrationType<YouTube> _youTubeHandler;
 }
