From 52d803b0c152e48b53ca5dede8c048152c566f42 Mon Sep 17 00:00:00 2001
From: Marcel Fransen <m.fransen@metrological.com>
Date: Sun, 2 Aug 2020 22:31:24 +0200
Subject: [PATCH] [OCDM] Lazy create decryption buffer

---
 OpenCDMi/FrameworkRPC.cpp | 70 +++++++++++++++++++++++++++------------
 1 file changed, 48 insertions(+), 22 deletions(-)

diff --git a/OpenCDMi/FrameworkRPC.cpp b/OpenCDMi/FrameworkRPC.cpp
index d873d4c..aae79d6 100644
--- a/OpenCDMi/FrameworkRPC.cpp
+++ b/OpenCDMi/FrameworkRPC.cpp
@@ -436,8 +436,6 @@ namespace Plugin {
                     const std::string keySystem,
                     CDMi::IMediaKeySession* mediaKeySession,
                     ::OCDM::ISession::ICallback* callback,
-                    const string bufferName,
-                    const uint32_t defaultSize,
                     const CommonEncryptionData* sessionData)
                     : _parent(*parent)
                     , _refCount(1)
@@ -446,7 +444,7 @@ namespace Plugin {
                     , _mediaKeySession(mediaKeySession)
                     , _mediaKeySessionExt(dynamic_cast<CDMi::IMediaKeySessionExt*>(mediaKeySession))
                     , _sink(this, callback)
-                    , _buffer(new DataExchange(mediaKeySession, bufferName, defaultSize))
+                    , _buffer(nullptr)
                     , _cencData(*sessionData)
                 {
                     ASSERT(parent != nullptr);
@@ -454,7 +452,7 @@ namespace Plugin {
                     ASSERT(_mediaKeySession != nullptr);
 
                     _mediaKeySession->Run(&_sink);
-                    TRACE(Trace::Information, ("Server::Session::Session(%s,%s,%s) => %p", _keySystem.c_str(), _sessionId.c_str(), bufferName.c_str(), this));
+                    TRACE(Trace::Information, ("Server::Session::Session(%s,%s) => %p", _keySystem.c_str(), _sessionId.c_str(), this));
                     TRACE_L1("Constructed the Session Server side: %p", this);
                 }
 
@@ -463,8 +461,6 @@ namespace Plugin {
                     const std::string keySystem,
                     CDMi::IMediaKeySessionExt* mediaKeySession,
                     ::OCDM::ISession::ICallback* callback,
-                    const string bufferName,
-                    const uint32_t defaultSize,
                     const CommonEncryptionData* sessionData)
                     : _parent(*parent)
                     , _refCount(1)
@@ -473,7 +469,7 @@ namespace Plugin {
                     , _mediaKeySession(dynamic_cast<CDMi::IMediaKeySession*>(mediaKeySession))
                     , _mediaKeySessionExt(mediaKeySession)
                     , _sink(this, callback)
-                    , _buffer(new DataExchange(dynamic_cast<CDMi::IMediaKeySession*>(mediaKeySession), bufferName, defaultSize))
+                    , _buffer(nullptr)
                     , _cencData(*sessionData)
                 {
                     ASSERT(parent != nullptr);
@@ -534,14 +530,47 @@ namespace Plugin {
                     return (_cencData.Status(CommonEncryptionData::KeyId(static_cast<CommonEncryptionData::systemType>(0), keyId, length)));
                 }
 
+                ::OCDM::OCDM_RESULT CreateSessionBuffer(std::string& bufferID) override {
+
+                    ::OCDM::OCDM_RESULT result = ::OCDM::OCDM_SUCCESS;
+                    _adminLock.Lock();
+                    if( _buffer == nullptr ) {
+
+                        if (_parent._administrator.AquireBuffer(bufferID) == true)
+                        {
+                            _buffer = new DataExchange(_mediaKeySession, bufferID, _parent.DefaultSize());
+                            _adminLock.Unlock();
+                            TRACE(Trace::Information, ("Server::Session::CreateSessionBuffer(%s,%s,%s) => %p", _keySystem.c_str(), _sessionId.c_str(), BufferId().c_str(), this));
+                        } else {
+                            _adminLock.Unlock();
+                            result = ::OCDM::OCDM_INVALID_DECRYPT_BUFFER;
+                            bufferID.clear();
+                            TRACE(Trace::Error, ("Failed to create buffer for Server::Session::CreateSessionBuffer(%s,%s) => %p", _keySystem.c_str(), _sessionId.c_str(), this));
+                        }
+                   } else {
+                        _adminLock.Unlock();
+                        TRACE(Trace::Information, ("Buffer already created Server::Session::CreateSessionBuffer(%s,%s,%s) => %p", _keySystem.c_str(), _sessionId.c_str(), BufferId().c_str(), this));
+                        bufferID = _buffer->Name();
+                        result = ::OCDM::OCDM_S_FALSE;
+                    }
+
+                    return result;
+                }
+
                 virtual std::string BufferId() const override
                 {
-                    return (_buffer->Name());
+                    std::string bufferid;
+                    _adminLock.Lock();
+                    if( _buffer != nullptr ) {
+                        _adminLock.Unlock();
+                        bufferid = _buffer->Name();
+                    }
+                    return bufferid;
                 }
 
                 virtual std::string BufferIdExt() const override
                 {
-                    return (_buffer->Name());
+                    return BufferId();
                 }
 
                 // Loads the data stored for the specified session into the cdm object
@@ -677,6 +706,10 @@ namespace Plugin {
                 return result;
             }
 
+            uint32_t DefaultSize() const {
+                return _defaultSize;
+            }
+
             // Create a MediaKeySession using the supplied init data and CDM data.
             virtual OCDM::OCDM_RESULT CreateSession(
                 const std::string& keySystem,
@@ -706,16 +739,10 @@ namespace Plugin {
                      {
                          if (sessionInterface != nullptr)
                          {
-                             std::string bufferId;
-
-                             // See if there is a buffer available we can use..
-                             if (_administrator.AquireBuffer(bufferId) == true)
-                             {
-
                                  SessionImplementation *newEntry = 
                                     Core::Service<SessionImplementation>::Create<SessionImplementation>(this,
                                                  keySystem, sessionInterface,
-                                                 callback, bufferId, _defaultSize, &keyIds);
+                                                callback, &keyIds);
 
                                  session = newEntry;
                                  sessionId = newEntry->SessionId();
@@ -733,11 +760,6 @@ namespace Plugin {
                                     }
                                 }
                                 _adminLock.Unlock();
-                             } else {
-                                 TRACE_L1("Could not allocate a buffer for session: %s", sessionId.c_str());
-
-                                 // TODO: We need to drop the session somehow...
-                             }
                          }
                      }
                  }
@@ -948,7 +970,11 @@ namespace Plugin {
 
                 if (session != nullptr) {
 
-                    _administrator.ReleaseBuffer(session->BufferId());
+                    string bufferid = session->BufferId();
+
+                    if( bufferid.empty() == false ) {
+                        _administrator.ReleaseBuffer(bufferid);
+                    }
 
                     std::list<SessionImplementation*>::iterator index(_sessionList.begin());
 
-- 
2.17.1

