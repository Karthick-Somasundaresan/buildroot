From db7f796ca59471ed864d19015840011e2d29443b Mon Sep 17 00:00:00 2001
From: Damian Danylko <d.danylko@metrological.com>
Date: Tue, 25 Aug 2020 13:23:21 +0200
Subject: [PATCH] Fix for additional data url handling for Netflix

---
 DIALServer/CMakeLists.txt | 11 +++++++++++
 DIALServer/DIALServer.cpp |  8 +++++---
 DIALServer/Netflix.cpp    |  9 +++++++--
 3 files changed, 23 insertions(+), 5 deletions(-)

diff --git a/DIALServer/CMakeLists.txt b/DIALServer/CMakeLists.txt
index f73d65a2..efb62ce2 100644
--- a/DIALServer/CMakeLists.txt
+++ b/DIALServer/CMakeLists.txt
@@ -54,6 +54,17 @@ if(PLUGIN_DIALSERVER_ENABLE_NETFLIX)
             Netflix.cpp)
 endif()
 
+if (NETFLIX_VERSION_5_1)
+    target_compile_definitions(${MODULE_NAME} 
+        PRIVATE 
+            NETFLIX_VERSION_5_1=ON)
+endif()
+if(NETFLIX_VERSION_5_2)
+    target_compile_definitions(${MODULE_NAME}
+    PRIVATE
+        NETFLIX_VERSION_5_2=ON)
+endif()
+
 target_link_libraries(${MODULE_NAME}
     PRIVATE
         CompileSettingsDebug::CompileSettingsDebug
diff --git a/DIALServer/DIALServer.cpp b/DIALServer/DIALServer.cpp
index 8d0e8c91..3d264ade 100644
--- a/DIALServer/DIALServer.cpp
+++ b/DIALServer/DIALServer.cpp
@@ -395,11 +395,13 @@ namespace Plugin {
             response->ErrorCode = Web::STATUS_REQUEST_ENTITY_TOO_LARGE;
             response->Message = _T("Payload too long");
         } else {
-            const string additionalDataUrl = (_T("http://localhost/") + app.Name() + _T("/") + _DefaultDataExtension);
+            // FIXME: At the moment part of additionalDataUrl parameter is hardcoded, localhost is obligatory by Netflix 
+            // but rest of the path can be created dynamically or should be retrived from configuration
+            const string additionalDataUrl = (_T("http://localhost/Service/DIALServer/Apps/") + app.Name() + _T("/") + _DefaultDataExtension);
             const uint16_t maxEncodedSize = static_cast<uint16_t>(additionalDataUrl.length() * 3 * sizeof(TCHAR));
             TCHAR* encodedDataUrl = reinterpret_cast<TCHAR*>(ALLOCA(maxEncodedSize));
-            Core::URL::Encode(additionalDataUrl.c_str(), static_cast<uint16_t>(additionalDataUrl.length()), encodedDataUrl, maxEncodedSize);
-            string parameters = (app.AppURL() + (app.HasQueryParameter()? _T("&") : _T("?")) + _T("additionalDataUrl=") + encodedDataUrl);
+            uint16_t dialpayload = Core::URL::Encode(additionalDataUrl.c_str(), static_cast<uint16_t>(additionalDataUrl.length()), encodedDataUrl, maxEncodedSize);
+            string parameters = (app.AppURL() + (app.HasQueryParameter()? _T("&") : _T("?")) + _T("dialpayload=") + std::to_string(dialpayload) + _T("&additionalDataUrl=") + encodedDataUrl);
 
             TRACE(Trace::Information, (_T("Launch Application [%s] with params: %s, payload: %s"), app.Name().c_str(), parameters.c_str(), payload.c_str()));
 
diff --git a/DIALServer/Netflix.cpp b/DIALServer/Netflix.cpp
index 149e87f2..ac0725b6 100644
--- a/DIALServer/Netflix.cpp
+++ b/DIALServer/Netflix.cpp
@@ -30,10 +30,15 @@ namespace DIALHandlers {
         static string Query(const string& params, const string& payload)
         {
             string query = params;
-
+#ifdef NETFLIX_VERSION_5_1
             // Set proper launch type, i.e. launched by DIAL
             query += _T("&source_type=12");
-
+#endif
+#ifdef NETFLIX_VERSION_5_2
+            // Set proper launch type, i.e. launched by DIAL
+            // FIXME: Use project specific iid for now
+            query += _T("&iid=7637f789");
+#endif
             if (payload.empty() == false) {
                 // Netflix expects the payload as urlencoded option "dial"
                 const uint16_t maxEncodeSize = static_cast<uint16_t>(payload.length() * 3 * sizeof(TCHAR));
