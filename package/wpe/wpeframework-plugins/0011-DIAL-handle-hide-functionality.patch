From 2c3c1c8a67e273a6a6cc19e14129e95346621b37 Mon Sep 17 00:00:00 2001
From: Damian Danylko <d.danylko@metrological.com>
Date: Thu, 27 Aug 2020 13:54:17 +0200
Subject: [PATCH] Handle DIAL hide funtionality for active and passive mode

---
 DIALServer/DIALServer.cpp        | 19 +++++++-------
 DIALServer/DIALServer.h          | 45 +++++++++++++++++++++++++++++---
 DIALServer/DIALServerJsonRpc.cpp | 18 +++++++++++++
 3 files changed, 69 insertions(+), 13 deletions(-)

diff --git a/DIALServer/DIALServer.cpp b/DIALServer/DIALServer.cpp
index 3d264ade..ee2751f5 100644
--- a/DIALServer/DIALServer.cpp
+++ b/DIALServer/DIALServer.cpp
@@ -31,6 +31,7 @@ namespace Plugin {
     static const string _DefaultControlExtension(_T("Run"));
     static const string _DefaultAppInfoDevice(_T("DeviceInfo.xml"));
     static const string _DefaultRunningExtension(_T("Running"));
+    static const string _DefaultHiddingExtension(_T("Hidding"));
     static const string _SystemApp(_T("system"));
 
     constexpr char kHideCommand[] = "hide";
@@ -445,15 +446,9 @@ namespace Plugin {
                         }
                     } else {
                         if (result == Core::ERROR_NONE) {
-                            if (app.URL(parameters, payload) == true) {
-                                response->Location = _dialServiceImpl->URL() + '/' + app.Name() + '/' + _DefaultControlExtension;
-                                response->ErrorCode = Web::STATUS_CREATED;
-                                response->Message = _T("Created");
-                            }
-                            else {
-                                response->ErrorCode = Web::STATUS_NOT_IMPLEMENTED;
-                                response->Message = _T("Not implemented");
-                            }
+                            response->Location = _dialServiceImpl->URL() + '/' + app.Name() + '/' + _DefaultControlExtension;
+                            response->ErrorCode = Web::STATUS_CREATED;
+                            response->Message = _T("Created");
                         }
                         else {
                             response->ErrorCode = Web::STATUS_SERVICE_UNAVAILABLE;
@@ -625,6 +620,12 @@ namespace Plugin {
                         result->Message = _T("OK");
                         selectedApp->second.Running(request.Verb == Web::Request::HTTP_POST);
                     }
+                } else if (index.Current() == _DefaultHiddingExtension) {
+                    if ((request.Verb == Web::Request::HTTP_POST) || (request.Verb == Web::Request::HTTP_DELETE)) {
+                        result->ErrorCode = Web::STATUS_OK;
+                        result->Message = _T("OK");
+                        selectedApp->second.Hidding(request.Verb == Web::Request::HTTP_POST);
+                    }    
                 } else if (index.Current() == _DefaultDataExtension) {
                     result->ErrorCode = Web::STATUS_OK;
                     result->Message = _T("OK");
diff --git a/DIALServer/DIALServer.h b/DIALServer/DIALServer.h
index e81640b9..cb8ef106 100644
--- a/DIALServer/DIALServer.h
+++ b/DIALServer/DIALServer.h
@@ -183,6 +183,10 @@ namespace Plugin {
             // Used only in passive mode
             virtual void Running(const bool isRunning) = 0;
 
+            // Method used for setting the wheter managed service is hidden or not. 
+            // Used only in passive mode
+            virtual void Hidding(const bool isHiding) = 0;
+
             // Method used for passing a SwitchBoard to DIAL handler. 
             // Used only in switchboard mode
             virtual void SwitchBoard(Exchange::ISwitchBoard* switchBoard) = 0;
@@ -216,6 +220,7 @@ namespace Plugin {
             AdditionalDataType AdditionalData() const override { return { }; }
             void AdditionalData(AdditionalDataType&& data) override {}
             void Running(const bool isRunning) override {}
+            void Hidding(const bool isHiding) override {}
             void SwitchBoard(Exchange::ISwitchBoard* switchBoard) override {}
         };
 
@@ -240,6 +245,7 @@ namespace Plugin {
                 , _callsign(config.Callsign.IsSet() == true ? config.Callsign.Value() : config.Name.Value())
                 , _passiveMode(config.Callsign.IsSet() == false)
                 , _isRunning(false)
+                , _isHidding(false)
                 , _hasRuntimeChange(config.RuntimeChange.Value())
                 , _parent(parent)
             {
@@ -280,11 +286,26 @@ namespace Plugin {
             {
                 return (_passiveMode == true ? _isRunning : (_switchBoard != nullptr ? _switchBoard->IsActive(_callsign) : (_service->State() == PluginHost::IShell::ACTIVATED)));
             }
-            bool IsHidden() const override { return false; }
-            bool HasHideAndShow() const override { return false; }
+            bool IsHidden() const override { return _isHidding; }
+            bool HasHideAndShow() const override { return true; }
             bool HasStartAndStop() const override { return true; }
-            uint32_t Show() override { return Core::ERROR_GENERAL; }
-            void Hide() override {}
+            uint32_t Show() override 
+            {
+                if ((_passiveMode == true) && (_isHidding ==true)) {
+                    const string message(_T("{ \"application\": \"") + _callsign + _T("\", \"request\":\"show\" }"));
+                    _service->Notify(message);
+                    _parent->event_show(_callsign);   
+                } 
+                return Core::ERROR_NONE; 
+            }
+            void Hide() override 
+            {
+                if (_passiveMode == true) {
+                    const string message(_T("{ \"application\": \"") + _callsign + _T("\", \"request\":\"hide\" }"));
+                    _service->Notify(message);
+                    _parent->event_hide(_callsign);
+                }
+            }
             virtual uint32_t Start(const string& data, const string& payload)
             {
                 uint32_t result = Core::ERROR_NONE;
@@ -376,6 +397,15 @@ namespace Plugin {
 
                 _isRunning = isRunning;
             }
+            virtual void Hidding(const bool isHidding)
+            {
+                // This method is only for the Passive mode..
+                if (_passiveMode != true) {
+                    TRACE_L1(_T("This app is not configured to be Passive !!!!%s"), "");
+                }
+
+                _isHidding = isHidding;
+            }
             virtual void SwitchBoard(Exchange::ISwitchBoard* switchBoard)
             {
                 ASSERT((_switchBoard != nullptr) ^ (switchBoard != nullptr));
@@ -403,6 +433,7 @@ namespace Plugin {
             string _callsign;
             bool _passiveMode;
             bool _isRunning;
+            bool _isHidding;
             bool _hasRuntimeChange;
             DIALServer* _parent;
             AdditionalDataType _additionalData;
@@ -744,6 +775,10 @@ namespace Plugin {
             {
                 _application->Running(isRunning);
             }
+            inline void Hidding(const bool isHidding)
+            {
+                _application->Hidding(isHidding);
+            }
             inline uint32_t Start(const string& data, const string& payload)
             {
                 return _application->Start(data, payload);
@@ -1040,6 +1075,8 @@ namespace Plugin {
         //JsonRpc
         void event_start(const string& application, const string& parameters);
         void event_stop(const string& application, const string& parameters);
+        void event_hide(const string& application);
+        void event_show(const string& application);
 
     private:
         Core::CriticalSection _adminLock;
diff --git a/DIALServer/DIALServerJsonRpc.cpp b/DIALServer/DIALServerJsonRpc.cpp
index daef188a..369525f9 100644
--- a/DIALServer/DIALServerJsonRpc.cpp
+++ b/DIALServer/DIALServerJsonRpc.cpp
@@ -30,6 +30,24 @@ namespace Plugin {
     // API implementation
     //
 
+    // Event: hide - Signals that application hide was requested over DIAL *(passive mode only)*
+    void DIALServer::event_hide(const string& application)
+    {
+        StartParamsInfo params;
+        params.Application = application;
+
+        Notify(_T("hide"), params);
+    }
+
+    // Event: show - Signals that application show was requested over DIAL *(passive mode only)*
+    void DIALServer::event_show(const string& application)
+    {
+        StartParamsInfo params;
+        params.Application = application;
+
+        Notify(_T("show"), params);
+    }
+
     // Event: start - Signals that application start was requested over DIAL *(passive mode only)*
     void DIALServer::event_start(const string& application, const string& parameters)
     {
