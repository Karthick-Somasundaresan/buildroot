From 15587dd1a85643373fcd2b21995b6ca15fd635b9 Mon Sep 17 00:00:00 2001
From: Damian Danylko <d.danylko@metrological.com>
Date: Thu, 8 Oct 2020 10:30:36 +0200
Subject: [PATCH] PlayerInfor for MCA

---
 PlayerInfo/CMakeLists.txt                 |   4 +-
 PlayerInfo/Dolby.h                        |  35 -------
 PlayerInfo/Dolby/CMakeLists.txt           |  18 +++-
 PlayerInfo/Dolby/DolbyOutput.cpp          |  19 +++-
 PlayerInfo/Dolby/Nexus/Implementation.cpp | 116 ++++++++++++++++++++++
 PlayerInfo/Dolby/include/Dolby.h          |   6 ++
 PlayerInfo/PlayerInfo.h                   |   1 +
 7 files changed, 158 insertions(+), 41 deletions(-)
 delete mode 100644 PlayerInfo/Dolby.h
 create mode 100644 PlayerInfo/Dolby/Nexus/Implementation.cpp

diff --git a/PlayerInfo/CMakeLists.txt b/PlayerInfo/CMakeLists.txt
index 660edc11..b494dddc 100644
--- a/PlayerInfo/CMakeLists.txt
+++ b/PlayerInfo/CMakeLists.txt
@@ -18,7 +18,7 @@
 set(PLUGIN_NAME PlayerInfo)
 set(MODULE_NAME ${NAMESPACE}${PLUGIN_NAME})
 
-option(DOLBY_SUPPORT "Build the PlayerInfo with dolby support" OFF)
+option(PLUGIN_PLAYERINFO_DOLBY_SUPPORT "Build the PlayerInfo with dolby support" OFF)
 
 find_package(${NAMESPACE}Plugins REQUIRED)
 find_package(${NAMESPACE}Definitions REQUIRED)
@@ -41,7 +41,7 @@ target_link_libraries(${MODULE_NAME}
 
 find_package(GSTREAMER REQUIRED)
 
-if(DOLBY_SUPPORT)
+if(PLUGIN_PLAYERINFO_DOLBY_SUPPORT)
 
     target_sources(${MODULE_NAME}
         PRIVATE
diff --git a/PlayerInfo/Dolby.h b/PlayerInfo/Dolby.h
deleted file mode 100644
index 021249d1..00000000
--- a/PlayerInfo/Dolby.h
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * If not stated otherwise in this file or this component's LICENSE file the
- * following copyright and licenses apply:
- *
- * Copyright 2020 RDK Management
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-#pragma once
-
-#include "Module.h"
-#include <interfaces/IDolby.h>
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-EXTERNAL void set_audio_output_type(enum WPEFramework::Exchange::Dolby::IOutput::Type type);
-
-EXTERNAL enum WPEFramework::Exchange::Dolby::IOutput::Type get_audio_output_type(void);
-
-#ifdef __cplusplus
-}
-#endif
diff --git a/PlayerInfo/Dolby/CMakeLists.txt b/PlayerInfo/Dolby/CMakeLists.txt
index a6f270b1..2f8e5086 100644
--- a/PlayerInfo/Dolby/CMakeLists.txt
+++ b/PlayerInfo/Dolby/CMakeLists.txt
@@ -17,7 +17,7 @@
 
 find_package(${NAMESPACE}Definitions REQUIRED)
 
-set(DOLBY_IMPLEMENTATION "NONE" CACHE STRING "Dolby C API implementation type." )
+set(PLUGIN_PLAYERINFO_DOLBY_IMPLEMENTATION "NONE" CACHE STRING "Dolby C API implementation type." )
 
 add_library(PlayerInfoDolby STATIC "")
 
@@ -25,7 +25,7 @@ target_include_directories(PlayerInfoDolby
     PRIVATE
     ${CMAKE_CURRENT_SOURCE_DIR}/include)
 
-if(${DOLBY_IMPLEMENTATION} STREQUAL "AMLogic")
+if(${PLUGIN_PLAYERINFO_DOLBY_IMPLEMENTATION} STREQUAL "AMLogic")
 
     find_library(DOLBY_LIBRARY
         NAMES dolbyms12)
@@ -39,6 +39,20 @@ if(${DOLBY_IMPLEMENTATION} STREQUAL "AMLogic")
             ${DOLBY_LIBRARY}
             ${NAMESPACE}Definitions::${NAMESPACE}Definitions)
 
+elseif(${PLUGIN_PLAYERINFO_DOLBY_IMPLEMENTATION} STREQUAL "Nexus")
+    find_package(NXCLIENT REQUIRED)
+    target_compile_definitions(PlayerInfoDolby
+        PRIVATE
+            NEXUS_SERVER_EXTERNAL)
+
+    target_sources(PlayerInfoDolby
+        PRIVATE
+            ${CMAKE_CURRENT_SOURCE_DIR}/Nexus/Implementation.cpp)
+
+    target_link_libraries(PlayerInfoDolby
+        PRIVATE
+            NXCLIENT::NXCLIENT
+            ${NAMESPACE}Definitions::${NAMESPACE}Definitions)
 else()
     message(SEND_ERROR "No DOLBY_IMPLEMENTATION picked. Turn off dolby support or pick one.")
 endif()
diff --git a/PlayerInfo/Dolby/DolbyOutput.cpp b/PlayerInfo/Dolby/DolbyOutput.cpp
index e3c64c24..4dedcda4 100644
--- a/PlayerInfo/Dolby/DolbyOutput.cpp
+++ b/PlayerInfo/Dolby/DolbyOutput.cpp
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+#include "../../Module.h"
 #include "Dolby.h"
 
 namespace WPEFramework
@@ -24,7 +25,7 @@ namespace WPEFramework
     namespace Plugin
     {
 
-        class DolbyOutputImplementation : public Exchange::Dolby::IOutput
+        class EXTERNAL DolbyOutputImplementation : public Exchange::Dolby::IOutput
         {
         public:
             void Mode(const Exchange::Dolby::IOutput::Type value) override
@@ -43,6 +44,20 @@ namespace WPEFramework
                 return result;
             };
 
+            bool AtmosLock(uint32_t& error) const override
+            {
+                fprintf(stderr, "***AG-PRINT*[%s:%d %s]  \n", __FILE__, __LINE__, __PRETTY_FUNCTION__);
+                bool status = get_atmos_lock(error);
+                return status;
+            }
+
+            uint32_t AtmosLock(bool enable) override
+            {
+                fprintf(stderr, "***AG-PRINT*[%s:%d %s]  \n", __FILE__, __LINE__, __PRETTY_FUNCTION__);
+                uint32_t status = set_atmos_lock(enable);
+                return status;
+            }
+
             BEGIN_INTERFACE_MAP(DolbyOutputImplementation)
                 INTERFACE_ENTRY(Exchange::Dolby::IOutput)
             END_INTERFACE_MAP
@@ -51,4 +66,4 @@ namespace WPEFramework
         SERVICE_REGISTRATION(DolbyOutputImplementation, 1, 0);
 
     } // namespace Plugin
-} // namespace WPEFramework
\ No newline at end of file
+} // namespace WPEFramework
diff --git a/PlayerInfo/Dolby/Nexus/Implementation.cpp b/PlayerInfo/Dolby/Nexus/Implementation.cpp
new file mode 100644
index 00000000..578a1786
--- /dev/null
+++ b/PlayerInfo/Dolby/Nexus/Implementation.cpp
@@ -0,0 +1,116 @@
+/*
+ * If not stated otherwise in this file or this component's LICENSE file the
+ * following copyright and licenses apply:
+ *
+ * Copyright 2020 RDK Management
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "../../Module.h"
+#include "Dolby.h"
+
+#include <nexus_config.h>
+#include <nexus_platform.h>
+#include <nxclient.h>
+#include <nexus_core_utils.h>
+/* #include "nexus_hdmi_output_dba.h" */
+
+using namespace WPEFramework::Exchange;
+
+uint32_t
+set_audio_output_type(const Dolby::IOutput::Type type)
+{
+    uint32_t result = WPEFramework::Core::ERROR_GENERAL;
+    TRACE_L1("NOT IMPLEMENTED");
+    return result;
+}
+
+Dolby::IOutput::Type toEnum(int code, uint32_t &error)
+{
+    Dolby::IOutput::Type result;
+    switch (code)
+    {
+    case Dolby::IOutput::Type::AUTO:
+    {
+        result = Dolby::IOutput::Type::AUTO;
+        error = WPEFramework::Core::ERROR_NONE;
+        break;
+    }
+    case Dolby::IOutput::Type::ATMOS_PASS_THROUGH:
+    {
+        result = Dolby::IOutput::Type::ATMOS_PASS_THROUGH;
+        error = WPEFramework::Core::ERROR_NONE;
+    }
+    case Dolby::IOutput::Type::DIGITAL_PASS_THROUGH:
+    {
+        result = Dolby::IOutput::Type::DIGITAL_PASS_THROUGH;
+        error = WPEFramework::Core::ERROR_NONE;
+    }
+    case Dolby::IOutput::Type::DIGITAL_PCM:
+    {
+        result = Dolby::IOutput::Type::DIGITAL_PCM;
+        error = WPEFramework::Core::ERROR_NONE;
+    }
+    default:
+    {
+        result = Dolby::IOutput::Type::AUTO;
+        error = WPEFramework::Core::ERROR_GENERAL;
+        TRACE_L1("Could not map the provided dolby output: %d to Dolby::IOutput::Type enumeration.");
+    }
+    }
+
+    return result;
+}
+
+WPEFramework::Exchange::Dolby::IOutput::Type
+get_audio_output_type(uint32_t &error)
+{
+    Dolby::IOutput::Type result = Dolby::IOutput::Type::AUTO;
+    TRACE_L1("NOT IMPLEMENTED");
+    error = WPEFramework::Core::ERROR_GENERAL;
+
+    return result;
+}
+
+bool get_atmos_lock(uint32_t& error)
+{
+    fprintf(stderr, "***AG-PRINT*[%s:%d %s]  \n", __FILE__, __LINE__, __PRETTY_FUNCTION__);
+    bool result = false;
+
+    NxClient_AudioProcessingSettings apSettings;
+    NxClient_GetAudioProcessingSettings(&apSettings);
+
+    result = apSettings.dolby.ddre.fixedAtmosOutput;
+
+    return result;
+}
+
+uint32_t set_atmos_lock(bool enable)
+{
+    uint32_t status = WPEFramework::Core::ERROR_NONE;
+
+    fprintf(stderr, "***AG-PRINT*[%s:%d %s]  \n", __FILE__, __LINE__, __PRETTY_FUNCTION__);
+    NxClient_AudioProcessingSettings apSettings;
+    NxClient_GetAudioProcessingSettings(&apSettings);
+
+    apSettings.dolby.ddre.fixedAtmosOutput = enable;
+
+    NEXUS_Error rc = NxClient_SetAudioProcessingSettings(&apSettings);
+    if(rc != NEXUS_SUCCESS) {
+        TRACE_L1("NxClient_SetAudioProcessingSettings failed");
+        status = WPEFramework::Core::ERROR_GENERAL;
+    }
+
+    return status;
+}
diff --git a/PlayerInfo/Dolby/include/Dolby.h b/PlayerInfo/Dolby/include/Dolby.h
index c2181c65..ef16dbce 100644
--- a/PlayerInfo/Dolby/include/Dolby.h
+++ b/PlayerInfo/Dolby/include/Dolby.h
@@ -51,6 +51,12 @@ set_audio_output_type(const enum WPEFramework::Exchange::Dolby::IOutput::Type ty
 EXTERNAL enum WPEFramework::Exchange::Dolby::IOutput::Type 
 get_audio_output_type(uint32_t& error);
 
+EXTERNAL uint32_t
+set_atmos_lock(bool enable);
+
+EXTERNAL bool
+get_atmos_lock(uint32_t& error);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/PlayerInfo/PlayerInfo.h b/PlayerInfo/PlayerInfo.h
index fc6010c3..35d538f4 100644
--- a/PlayerInfo/PlayerInfo.h
+++ b/PlayerInfo/PlayerInfo.h
@@ -52,6 +52,7 @@ namespace Plugin {
         INTERFACE_ENTRY(PluginHost::IWeb)
         INTERFACE_ENTRY(PluginHost::IDispatcher)
         INTERFACE_AGGREGATE(Exchange::IPlayerProperties, _player)
+        INTERFACE_AGGREGATE(Exchange::Dolby::IOutput, _dolbyOut);
         END_INTERFACE_MAP
 
     public:
-- 
2.17.1

