From ab2e244c2f21fcc5675d0418156ff91931870561 Mon Sep 17 00:00:00 2001
From: Pierre Wielders <pierre@wielders.net>
Date: Sun, 23 Aug 2020 14:34:28 +0200
Subject: [PATCH] [VOLUMECONTROL] Add traces so we can debug the volume
 control.

---
 VolumeControl/Nexus/VolumeControlPlatform.cpp | 27 +++++++++++++------
 VolumeControl/VolumeControlImplementation.cpp |  4 +++
 2 files changed, 23 insertions(+), 8 deletions(-)

diff --git a/VolumeControl/Nexus/VolumeControlPlatform.cpp b/VolumeControl/Nexus/VolumeControlPlatform.cpp
index 399151df..c691f508 100644
--- a/VolumeControl/Nexus/VolumeControlPlatform.cpp
+++ b/VolumeControl/Nexus/VolumeControlPlatform.cpp
@@ -56,22 +56,23 @@ class VolumeControlPlatformNexus : public VolumeControlPlatform {
       NxClient_AudioSettings audioSettings;
       NxClient_GetAudioSettings(&audioSettings);
       audioSettings.muted = muted;
-      uint32_t result = NxClient_SetAudioSettings(&audioSettings) != 0 ?
-            Core::ERROR_GENERAL :
-            Core::ERROR_NONE;
+      int result = NxClient_SetAudioSettings(&audioSettings); 
 
-      return result;
+      TRACE(Trace::Information, (_T("Hardware set muted: %d [%d]"), audioSettings.muted, result));
+      return (result != 0 ? Core::ERROR_GENERAL : Core::ERROR_NONE);
   }
 
   bool Muted() const override
   {
       NxClient_AudioSettings audioSettings;
       NxClient_GetAudioSettings(&audioSettings);
+      TRACE(Trace::Information, (_T("Hardware get muted: %d"), audioSettings.muted));
       return audioSettings.muted;
   }
 
   uint32_t Volume(uint8_t volume) override
   {
+      const TCHAR* type = _T("Decibel");
       volume = std::max(volume, kMinVolume);
       volume = std::min(volume, kMaxVolume);
       int32_t toSet = volume;
@@ -81,22 +82,32 @@ class VolumeControlPlatformNexus : public VolumeControlPlatform {
           toSet = VolumeControlPlatformNexus::ToNexusDb(volume);
       } else {
           toSet = VolumeControlPlatformNexus::ToNexusLinear(volume);
+          type = _T("Linear");
       }
 
       audioSettings.leftVolume = audioSettings.rightVolume = toSet;
-      return NxClient_SetAudioSettings(&audioSettings) != 0 ?
-            Core::ERROR_GENERAL :
-            Core::ERROR_NONE;
+
+      int result = NxClient_SetAudioSettings(&audioSettings);
+
+      TRACE(Trace::Information, (_T("Hardware set volume (%s): %d [%d]"), type, toSet, result));
+
+      return (result != 0 ? Core::ERROR_GENERAL : Core::ERROR_NONE);
   }
 
   uint8_t Volume() const override
   {
+      uint8_t result;
+
       NxClient_AudioSettings audioSettings;
       NxClient_GetAudioSettings(&audioSettings);
       ASSERT(audioSettings.leftVolume == audioSettings.rightVolume);
-      return audioSettings.volumeType == NEXUS_AudioVolumeType_eDecibel ?
+      result = audioSettings.volumeType == NEXUS_AudioVolumeType_eDecibel ?
           VolumeControlPlatformNexus::FromNexusDb(audioSettings.leftVolume) :
           VolumeControlPlatformNexus::FromNexusLinear(audioSettings.leftVolume);
+
+      TRACE(Trace::Information, (_T("Hardware get volume: %d"), result));
+
+      return (result);
   }
 
 private:
diff --git a/VolumeControl/VolumeControlImplementation.cpp b/VolumeControl/VolumeControlImplementation.cpp
index b02215cd..58e787b3 100644
--- a/VolumeControl/VolumeControlImplementation.cpp
+++ b/VolumeControl/VolumeControlImplementation.cpp
@@ -59,23 +59,27 @@ namespace Plugin {
 
     uint32_t VolumeControlImplementation::Muted(const bool muted)
     {
+        TRACE(Trace::Information, (_T("Set Muted: %s"), muted ? _T("true") : _T("false")));
         return _platform->Muted(muted);
     }
 
     uint32_t VolumeControlImplementation::Muted(bool& muted) const
     {
         muted = _platform->Muted();
+        TRACE(Trace::Information, (_T("Get Muted: %s"), muted ? _T("true") : _T("false")));
         return Core::ERROR_NONE;
     }
 
     uint32_t VolumeControlImplementation::Volume(const uint8_t volume)
     {
+        TRACE(Trace::Information, (_T("Set Volume: %d"), volume));
         return _platform->Volume(volume);
     }
 
     uint32_t VolumeControlImplementation::Volume(uint8_t& vol) const
     {
         vol = _platform->Volume();
+        TRACE(Trace::Information, (_T("Get Volume: %d"), vol));
         return Core::ERROR_NONE;
     }
