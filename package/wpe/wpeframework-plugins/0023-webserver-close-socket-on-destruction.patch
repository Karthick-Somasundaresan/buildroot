From d47c10225af6158757d5db6f2ffaef051cc6ba77 Mon Sep 17 00:00:00 2001
From: Bram Oosterhuis <mail@bybram.com>
Date: Fri, 16 Oct 2020 12:49:50 +0200
Subject: [PATCH] Webserver: Close socket on destruction.

---
 WebServer/WebServerImplementation.cpp | 21 +++++++++++++--------
 1 file changed, 13 insertions(+), 8 deletions(-)

diff --git a/WebServer/WebServerImplementation.cpp b/WebServer/WebServerImplementation.cpp
index 47b5dd88..dff17e11 100644
--- a/WebServer/WebServerImplementation.cpp
+++ b/WebServer/WebServerImplementation.cpp
@@ -206,16 +206,16 @@ namespace Plugin {
         private:
             class OutgoingChannel : public Web::WebLinkType<Core::SocketStream, Web::Response, Web::Request, ResponseFactory> {
             private:
-                OutgoingChannel() = delete;
-                OutgoingChannel(const OutgoingChannel&) = delete;
-                OutgoingChannel& operator=(const OutgoingChannel&) = delete;
-
                 struct OutstandingMessage {
                     Core::ProxyType<Web::Request> Request;
                     uint32_t Id;
                 };
 
             public:
+                OutgoingChannel() = delete;
+                OutgoingChannel(const OutgoingChannel&) = delete;
+                OutgoingChannel& operator=(const OutgoingChannel&) = delete;
+
                 OutgoingChannel(const string& path, const string& replacement, ProxyMap& proxyMap, const Core::NodeId& remoteId)
                     : Web::WebLinkType<Core::SocketStream, Web::Response, Web::Request, ResponseFactory>(2, false, remoteId.AnyInterface(), remoteId, 1024, 1024)
                     , _path(path)
@@ -224,6 +224,10 @@ namespace Plugin {
                     , _proxyMap(proxyMap)
                 {
                 }
+                
+                ~OutgoingChannel() override {
+                    Close(Core::infinite);
+                }
 
                 void ProxyRequest(Core::ProxyType<Web::Request>& request, uint32_t id)
                 {
@@ -404,20 +408,21 @@ namespace Plugin {
         };
 
         class IncomingChannel : public Web::WebLinkType<Core::SocketStream, Web::Request, Web::Response, RequestFactory> {
-        private:
+        public:
             IncomingChannel() = delete;
             IncomingChannel(const IncomingChannel& copy) = delete;
             IncomingChannel& operator=(const IncomingChannel&) = delete;
-
-        public:
+            
             IncomingChannel(const SOCKET& connector, const Core::NodeId& remoteId, Core::SocketServerType<IncomingChannel>* parent)
                 : Web::WebLinkType<Core::SocketStream, Web::Request, Web::Response, RequestFactory>(2, false, connector, remoteId, 1024, 1024)
                 , _id(0)
                 , _parent(static_cast<ChannelMap&>(*parent))
             {
             }
-            virtual ~IncomingChannel()
+            
+            ~IncomingChannel() override
             {
+                Close(Core::infinite);
             }
 
         private:
