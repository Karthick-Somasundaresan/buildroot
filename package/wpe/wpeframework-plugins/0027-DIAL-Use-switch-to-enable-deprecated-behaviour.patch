From b08923a102d2946d8e62fb5a622301d80d1dc294 Mon Sep 17 00:00:00 2001
From: Bram Oosterhuis <mail@bybram.com>
Date: Thu, 8 Oct 2020 11:15:57 +0200
Subject: [PATCH 5/5] DIAL: Use switch to enable deprecated behaviour

---
 DIALServer/DIALServer.cpp | 11 ++++++-----
 DIALServer/DIALServer.h   | 20 ++++++++++++++++++--
 2 files changed, 24 insertions(+), 7 deletions(-)

diff --git a/DIALServer/DIALServer.cpp b/DIALServer/DIALServer.cpp
index b5cd808..8c89c77 100644
--- a/DIALServer/DIALServer.cpp
+++ b/DIALServer/DIALServer.cpp
@@ -277,6 +277,8 @@ namespace Plugin {
 
         _config.FromString(service->ConfigLine());
 
+        _deprecatedAPI = _config.DeprecatedAPI.Value();
+
         // get an interface with a public IP address, then we will have a proper MAC address..
         Core::NodeId selectedNode = Core::NodeId(_config.Interface.Value().c_str());
 
@@ -401,9 +403,8 @@ namespace Plugin {
             const string additionalDataUrl = (_T("http://localhost") + ((_webServerPort.empty() == true)? _T("") : _T(":") + _webServerPort) + _T("/Service/DIALServer/Apps/") + app.Name() + _T("/") + _DefaultDataExtension);
             const uint16_t maxEncodedSize = static_cast<uint16_t>(additionalDataUrl.length() * 3 * sizeof(TCHAR));
             TCHAR* encodedDataUrl = reinterpret_cast<TCHAR*>(ALLOCA(maxEncodedSize)); 
-            Core::URL::Encode(additionalDataUrl.c_str(), static_cast<uint16_t>(additionalDataUrl.length()), encodedDataUrl, maxEncodedSize);
-            string parameters = (app.AppURL() + (app.HasQueryParameter()? _T("&") : _T("?")) + _T("additionalDataUrl=") + encodedDataUrl);
-
+            uint16_t dialpayload = Core::URL::Encode(additionalDataUrl.c_str(), static_cast<uint16_t>(additionalDataUrl.length()), encodedDataUrl, maxEncodedSize);
+            const string parameters = (app.AppURL() + (app.HasQueryParameter()? _T("&") : _T("?")) + ( (DeprecatedAPI() == true) ? ( _T("dialpayload=") + std::to_string(dialpayload) + _T("&") ) : _T(""))  + _T("additionalDataUrl=") + encodedDataUrl);
             TRACE(Trace::Information, (_T("Launch Application [%s] with params: %s, payload: %s"), app.Name().c_str(), parameters.c_str(), payload.c_str()));
 
             // See if we can find the plugin..
@@ -430,7 +431,7 @@ namespace Plugin {
                     
                     TRACE_L1("Cannot connect DIAL handler to application %s", app.Name().c_str());
                 } else if (app.HasHideAndShow() == true && app.IsHidden() == true) {
-                    uint32_t result = app.Show();
+                    uint32_t result = (DeprecatedAPI() == true) ? app.Show() : app.Start(parameters, payload);
 
                     // system app has special error codes. Handle them here.
                     if (app.Name() == _SystemApp) {
@@ -620,7 +621,7 @@ namespace Plugin {
                         result->Message = _T("OK");
                         selectedApp->second.Running(request.Verb == Web::Request::HTTP_POST);
                     }
-                } else if (index.Current() == _DefaultHiddenExtension) {
+                } else if (index.Current() == ((DeprecatedAPI() == true) ? _T("hidding") : _DefaultHiddenExtension)) {
                     if ((request.Verb == Web::Request::HTTP_POST) || (request.Verb == Web::Request::HTTP_DELETE)) {
                         result->ErrorCode = Web::STATUS_OK;
                         result->Message = _T("OK");
diff --git a/DIALServer/DIALServer.h b/DIALServer/DIALServer.h
index 66383e4..a0593c8 100644
--- a/DIALServer/DIALServer.h
+++ b/DIALServer/DIALServer.h
@@ -289,6 +289,22 @@ namespace Plugin {
                 }
             }
 
+        private:
+            string ConcatenatePayload(const string& params, const string& payload)
+            {
+                string result = params;
+
+                if (payload.empty() == false) {
+                // Netflix expects the payload as urlencoded option "dial"
+                    const uint16_t maxEncodeSize = static_cast<uint16_t>(payload.length() * 3 * sizeof(TCHAR));
+                    TCHAR* encodedPayload = reinterpret_cast<TCHAR*>(ALLOCA(maxEncodeSize));
+                    Core::URL::Encode(payload.c_str(), static_cast<uint16_t>(payload.length()), encodedPayload, maxEncodeSize);
+                    result = result + _T("&dial=") + encodedPayload;
+                }
+
+                return (result);
+            }
+
         public:
             // Methods that the DIALServer requires.
             virtual bool IsRunning() const
@@ -319,9 +335,9 @@ namespace Plugin {
             {
                 uint32_t result = Core::ERROR_NONE;
                 if (_passiveMode == true) {
-                    const string message(_T("{ \"application\": \"") + _callsign + _T("\", \"request\":\"start\",  \"parameters\":\"") + parameters +  _T("\", \"payload\":\"") + payload + _T("\" }"));
+                    const string message(_T("{ \"application\": \"") + _callsign + _T("\", \"request\":\"start\",  \"parameters\":\"") + ((_parent->DeprecatedAPI() == true) ? ConcatenatePayload(parameters, payload) : parameters) +  _T("\", \"payload\":\"") + payload + _T("\" }"));
                     _service->Notify(message);
-                    _parent->event_start(_callsign, parameters, payload);
+                    _parent->event_start(_callsign, (_parent->DeprecatedAPI() == true) ? ConcatenatePayload(parameters, payload) : parameters, payload);
                     
                 } else {
                     if (_switchBoard != nullptr) {
-- 
2.25.1

