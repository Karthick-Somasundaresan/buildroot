From 2b862023c3a37cd8be920ce042104a55875d03a6 Mon Sep 17 00:00:00 2001
From: Marcel Fransen <m.fransen@metrological.com>
Date: Sun, 2 Aug 2020 22:31:16 +0200
Subject: [PATCH] [OCDM] Lazy create decryption buffer

---
 Source/ocdm/IOCDM.h         |  3 +++
 Source/ocdm/open_cdm_impl.h | 53 +++++++++++++++++++++++++++++--------
 2 files changed, 45 insertions(+), 11 deletions(-)

diff --git a/Source/ocdm/IOCDM.h b/Source/ocdm/IOCDM.h
index 31e4a23d..61f3fccd 100644
--- a/Source/ocdm/IOCDM.h
+++ b/Source/ocdm/IOCDM.h
@@ -100,6 +100,9 @@ struct ISession : virtual public WPEFramework::Core::IUnknown {
     virtual KeyStatus Status() const = 0;
     virtual KeyStatus Status(const uint8_t keyID[] /* @length:keyIDLength */, const uint8_t keyIDLength) const = 0;
 
+    // Lazy Create the decryption buffer
+    virtual OCDM_RESULT CreateSessionBuffer(string& bufferID /* @out */ ) = 0;
+
     // Report the name to be used for the Shared Memory for exchanging the
     // Encrypted fragements.
     virtual std::string BufferId() const = 0;
diff --git a/Source/ocdm/open_cdm_impl.h b/Source/ocdm/open_cdm_impl.h
index d523c6cf..69d7ca6e 100644
--- a/Source/ocdm/open_cdm_impl.h
+++ b/Source/ocdm/open_cdm_impl.h
@@ -24,6 +24,8 @@
 #include "Module.h"
 #include "open_cdm.h"
 
+#include <atomic>
+
 using namespace WPEFramework;
 
 extern Core::CriticalSection _systemLock;
@@ -526,6 +528,9 @@ public:
         if (_session != nullptr) {
             Session(nullptr);
         }
+        if (_decryptSession != nullptr) {
+            DecryptSession(nullptr);
+        }
 
         system->Release();
         TRACE_L1("Destructed the Session Client side: %p", this);
@@ -554,7 +559,7 @@ public:
     {
         static string EmptyString;
 
-        return (_decryptSession != nullptr ? _decryptSession->Name() : EmptyString);
+        return (_decryptSession != nullptr ? (*_decryptSession).Name() : EmptyString);
     }
     inline bool IsValid() const { return (_session != nullptr); }
     inline OCDM::ISession::KeyStatus Status(const uint8_t keyIDLength, const uint8_t keyId[]) const
@@ -611,8 +616,17 @@ public:
         uint32_t initWithLast15)
     {
         uint32_t result = OpenCDMError::ERROR_INVALID_DECRYPT_BUFFER;
-        if (_decryptSession != nullptr) {
-            result = _decryptSession->Decrypt(encryptedData, encryptedDataLength, ivData,
+
+        // lazy create decryptbuffer
+        if(_decryptSession == nullptr) {
+            DecryptSession(_session);
+        }
+
+        // prevent unnecesary double atomic access
+        DataExchange* decryptSession = _decryptSession;
+
+        if (decryptSession != nullptr) {
+            result = decryptSession->Decrypt(encryptedData, encryptedDataLength, ivData,
                 ivDataLength, keyId, keyIdLength,
                 initWithLast15);
             if(result)
@@ -692,13 +706,9 @@ protected:
         if (session == nullptr) {
 
             ASSERT (_session != nullptr);
-            ASSERT (_decryptSession != nullptr);
 
             _session->Release();
 
-            delete _decryptSession;
-            _decryptSession = nullptr;
-
             if (_sessionExt != nullptr) {
                 _sessionExt->Release();
                 _sessionExt = nullptr;
@@ -709,13 +719,34 @@ protected:
 
         if (session != nullptr) {
 
-            ASSERT (_decryptSession == nullptr);
-
             _session->AddRef();
-            _decryptSession = new DataExchange(_session->BufferId());
             _sessionExt = _session->QueryInterface<OCDM::ISessionExt>();
         }
     }
+    void DecryptSession(OCDM::ISession* session)
+    {
+        if (session == nullptr) {
+            delete _decryptSession;
+            _decryptSession = nullptr;
+        } else {
+            std::string bufferid;
+            uint32_t result = _session->CreateSessionBuffer(bufferid);
+
+            if( result == 0 ) {
+                ASSERT (_decryptSession == nullptr);
+                _decryptSession = new DataExchange(bufferid); 
+            }
+            else if ( result == 1 ) {
+                while( _decryptSession == nullptr ) {
+                    SleepMs(0);
+                }
+            }
+            else {
+                ASSERT (_decryptSession == nullptr);
+                TRACE_L1("DecryptSession could not be created!");
+            }
+        }
+    }
    // Event fired when a key message is successfully created.
     void OnKeyMessage(const uint8_t keyMessage[], const uint16_t length, const std::string& URL)
     {
@@ -768,7 +799,7 @@ protected:
 
 private:
     std::string _sessionId;
-    DataExchange* _decryptSession;
+    std::atomic<DataExchange*> _decryptSession;
     OCDM::ISession* _session;
     OCDM::ISessionExt* _sessionExt;
     uint32_t _refCount;
-- 
2.17.1

