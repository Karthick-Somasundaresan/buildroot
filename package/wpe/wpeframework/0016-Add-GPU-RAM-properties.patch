From 43f2b379d53ed8ea0450ff11cec2b6da196844a1 Mon Sep 17 00:00:00 2001
From: Bram Oosterhuis <mail@bybram.com>
Date: Mon, 16 Nov 2020 16:07:20 +0100
Subject: [PATCH] Add GPU RAM properties

---
 Source/displayinfo/DisplayInfo.cpp       | 25 ++++++++++++++++++++++++
 Source/displayinfo/include/displayinfo.h | 16 +++++++++++++++
 2 files changed, 41 insertions(+)

diff --git a/Source/displayinfo/DisplayInfo.cpp b/Source/displayinfo/DisplayInfo.cpp
index 8db82ad..5627e2d 100644
--- a/Source/displayinfo/DisplayInfo.cpp
+++ b/Source/displayinfo/DisplayInfo.cpp
@@ -72,6 +72,7 @@ private:
         , _name(displayName)
         , _displayConnection(interface)
         , _hdrProperties(interface != nullptr ? interface->QueryInterface<Exchange::IHDRProperties>() : nullptr)
+        , _graphicsProperties(interface != nullptr ? interface->QueryInterface<Exchange::IGraphicsProperties>() : nullptr)
         , _notification(this)
         , _callbacks()
     {
@@ -270,6 +271,9 @@ private:
         if (_hdrProperties != nullptr) {
             _hdrProperties->Release();
         }
+        if(_graphicsProperties != nullptr) {
+            _graphicsProperties->Release();
+        }
     }
 
 public:
@@ -435,12 +439,23 @@ public:
                      Exchange::IConnectionProperties::HDCPProtectionType::HDCP_Unencrypted ) :
                    Exchange::IConnectionProperties::HDCPProtectionType::HDCP_Unencrypted );
     }
+    uint64_t TotalGpuRam() const 
+    {
+        uint64_t memory(0);
+        return _graphicsProperties != nullptr ? _graphicsProperties->TotalGpuRam(memory) : memory;
+    }
+    uint64_t FreeGpuRam() const 
+    {
+        uint64_t memory(0);
+        return _graphicsProperties != nullptr ? _graphicsProperties->FreeGpuRam(memory) : memory;
+    }
 
 private:
     mutable int _refCount;
     const string _name;
     Exchange::IConnectionProperties* _displayConnection;
     Exchange::IHDRProperties* _hdrProperties;
+    Exchange::IGraphicsProperties* _graphicsProperties;
     Core::Sink<Notification> _notification;
     Callbacks _callbacks;
     static DisplayInfo::DisplayInfoAdministration _administration;
@@ -566,6 +581,16 @@ displayinfo_hdcp_protection_t displayinfo_hdcp_protection(struct displayinfo_typ
     return type;
 }
 
+uint64_t displayinfo_total_gpu_ram(struct displayinfo_type* instance)
+{
+    return reinterpret_cast<DisplayInfo*>(instance)->TotalGpuRam();
+}
+
+uint64_t displayinfo_free_gpu_ram(struct displayinfo_type* instance)
+{
+    return reinterpret_cast<DisplayInfo*>(instance)->FreeGpuRam();
+}
+
 uint32_t displayinfo_edid(struct displayinfo_type* displayinfo, uint8_t buffer[], uint16_t* length)
 {
     return reinterpret_cast<DisplayInfo*>(displayinfo)->EDID(*length, buffer);
diff --git a/Source/displayinfo/include/displayinfo.h b/Source/displayinfo/include/displayinfo.h
index 722bd03..e89be66 100644
--- a/Source/displayinfo/include/displayinfo.h
+++ b/Source/displayinfo/include/displayinfo.h
@@ -206,6 +206,22 @@ EXTERNAL displayinfo_hdr_t displayinfo_hdr(struct displayinfo_type* instance);
  **/
 EXTERNAL displayinfo_hdcp_protection_t displayinfo_hdcp_protection(struct displayinfo_type* instance);
 
+/**
+ * \brief Get the total available GPU RAM space in bytes.
+ * 
+ * \param instance Instance of \ref displayinfo_type.
+ * \return The total amount of GPU RAM available on the device.
+ */
+EXTERNAL uint64_t displayinfo_total_gpu_ram(struct displayinfo_type* instance);
+
+/**
+ * \brief Get the currently available GPU RAM in bytes.
+ * 
+ * \param instance Instance of \ref displayinfo_type.
+ * \return The current amount of available GPU RAM memory.
+ */
+EXTERNAL uint64_t displayinfo_free_gpu_ram(struct displayinfo_type* instance);
+
 /**
  * \brief Returns EDID data of a connected display.
  *
-- 
2.25.1

