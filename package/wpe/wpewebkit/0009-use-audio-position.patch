diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
index 0a875d2..347fcc1 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
@@ -306,8 +306,7 @@ void MediaPlayerPrivateGStreamer::commitLoad()
 }
 
 #if PLATFORM(BCM_NEXUS)
-// utility function for bcm nexus seek functionality
-static GstElement* findVideoDecoder(GstElement *element)
+static GstElement* findElement(GstElement *element, const CString &search)
 {
     GstElement* re = nullptr;
     if (GST_IS_BIN(element)) {
@@ -319,7 +318,7 @@ static GstElement* findVideoDecoder(GstElement *element)
                 case GST_ITERATOR_OK:
                 {
                     GstElement *next = GST_ELEMENT(g_value_get_object(&item));
-                    done = (re = findVideoDecoder(next));
+                    done = (re = findElement(next, search));
                     g_value_reset (&item);
                     break;
                 }
@@ -334,8 +333,13 @@ static GstElement* findVideoDecoder(GstElement *element)
         }
         g_value_unset (&item);
         gst_iterator_free(it);
-    } else if (GST_IS_VIDEO_DECODER(element))
+    } else if (g_strstr_len(gst_element_get_name(element), search.length(), search.data())) {
+        GST_DEBUG("Element: %s", gst_element_get_name(element));
         re = element;
+    } else {
+        GST_DEBUG("Element: %s", gst_element_get_name(element));
+    }
+
     return re;
 }
 #endif
@@ -362,6 +366,8 @@ MediaTime MediaPlayerPrivateGStreamer::playbackPosition() const
 
     m_lastQuery = now;
 
+    MediaTime playbackPosition = MediaTime::zeroTime();
+
     // Position is only available if no async state change is going on and the state is either paused or playing.
     gint64 position = GST_CLOCK_TIME_NONE;
     GstElement* videoDec = nullptr;
@@ -370,16 +376,38 @@ MediaTime MediaPlayerPrivateGStreamer::playbackPosition() const
     g_object_get(m_pipeline.get(), "video-sink", &videoDec, nullptr);
     if (!GST_IS_ELEMENT(videoDec))
         return MediaTime::zeroTime();
+#elif PLATFORM(BCM_NEXUS)
+    // implement getting pts time from broadcom decoder directly for seek functionality
+    /*GstElement*/ videoDec = findElement(m_pipeline.get(), "brcmvideodecoder");
+    GstElement* audioDec = findElement(m_pipeline.get(), "brcmaudiodecoder");
+    if (GST_IS_ELEMENT(videoDec)) {
+        if (gst_element_query(videoDec, query))
+            gst_query_parse_position(query, 0, &position);
+        gst_query_unref(query);
+    }
+    gint64 audioPosition = GST_CLOCK_TIME_NONE;
+    if (GST_IS_ELEMENT(audioDec)) {
+        GstQuery* audioPosQuery = gst_query_new_position(GST_FORMAT_TIME);
+        if (gst_element_query(audioDec, audioPosQuery))
+            gst_query_parse_position(audioPosQuery, 0, &audioPosition);
+        gst_query_unref(audioPosQuery);
+    }
+
+    GST_DEBUG("BRCM Video Position %" GST_TIME_FORMAT "BRCM Audio Position %" GST_TIME_FORMAT, GST_TIME_ARGS(position), GST_TIME_ARGS(audioPosition));
+    if (audioPosition != GST_CLOCK_TIME_NONE && position != GST_CLOCK_TIME_NONE)
+        position = audioPosition;
 #else
     videoDec = m_pipeline.get();
 #endif
+
+#if !PLATFORM(BCM_NEXUS)
     if (gst_element_query(videoDec, query))
         gst_query_parse_position(query, 0, &position);
     gst_query_unref(query);
+#endif
 
     GST_DEBUG("Position %" GST_TIME_FORMAT, GST_TIME_ARGS(position));
 
-    MediaTime playbackPosition = MediaTime::zeroTime();
     GstClockTime gstreamerPosition = static_cast<GstClockTime>(position);
     if (GST_CLOCK_TIME_IS_VALID(gstreamerPosition))
         playbackPosition = MediaTime(gstreamerPosition, GST_SECOND);
@@ -387,16 +415,6 @@ MediaTime MediaPlayerPrivateGStreamer::playbackPosition() const
         playbackPosition = m_seekTime;
 
 #if PLATFORM(BCM_NEXUS)
-    // implement getting pts time from broadcom decoder directly for seek functionality
-    gint64 currentPts = -1;
-    /*GstElement**/ videoDec = findVideoDecoder(m_pipeline.get());
-    const char* videoPtsPropertyName = "video_pts";
-    if (videoDec)
-        g_object_get(videoDec, videoPtsPropertyName, &currentPts, nullptr);
-    if (currentPts > -1) {
-        playbackPosition = MediaTime(((currentPts * GST_MSECOND) / 45), GST_SECOND);
-        GST_DEBUG("Using position reported by the video decoder: %s", toString(playbackPosition).utf8().data());
-    }
     if (!playbackPosition && m_seekTime.isValid())
         playbackPosition = m_seekTime;
 #endif
